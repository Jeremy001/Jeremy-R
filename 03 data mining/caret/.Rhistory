library('caret')
set.seed(1)
str(data)
sum(is.na(data))
preprocvalues <- preprocess(data, method = c('medianImpute', 'center', 'scale'))
preprocvalues <- preProcess(data, method = c('medianImpute', 'center', 'scale'))
library('RANN')
install.packages("RANN")
library('RANN')
datac_processed <- predict(preprocvalues, data)
preprocvalues
index <- createDataPartition(datac_processed$Loan_Status, p = 0.75, list = FALSE)
View(index)
data_processed <- predict(preprocvalues, data)
rm(datac_processed)
index <- createDataPartition(data_processed$Loan_Status, p = 0.75, list = FALSE)
trainset <- data_processed[index]
testset <- data_processed[-index]
trainset <- data_processed[index,]
testset <- data_processed[-index,]
fitcontrol <- trainControl(
method = 'cv',
number = 5,
savePredictions = 'final',
classProbs = T)
predictors <- c('Credit_History', 'LoanAmount', 'Loan_Amount_Term', 'ApplicantIncoome','CoapplicantIncome')
outcomename <- 'Loan_Status'
model_rf <- train(trainset[, predictors], trainset[, outcomename], method = 'rf', trControl = fitcontrol, tuneLength = 3)
predictors <- c('Credit_History', 'LoanAmount', 'Loan_Amount_Term', 'ApplicantIncome','CoapplicantIncome')
model_rf <- train(trainset[, predictors], trainset[, outcomename], method = 'rf', trControl = fitcontrol, tuneLength = 3)
testset$pred_rf <- predict(object = model_rf, testset[, predictors])
confusionMatrix(testset$Loan_Status, testset$pred_rf)
model_knn <- train(trainset[, predictors], trainset[, outcomename], method = 'knn', trControl = fitcontrol, tuneLength = 3)
testset$pred_rf <- predict(object = model_knn, testset[, predictors])
testset$pred_rf <- predict(object = model_rf, testset[, predictors])
testset$pred_knn <- predict(object = model_knn, testset[, predictors])
confusionMatrix(testset$Loan_Status, testset$pred_knn)
model_lr <- train(trainset[, predictors], trainset[, outcomename], method = 'glm', trControl = fitcontrol, tuneLength = 3)
testset$pred_lr <- predict(object = model_lr, testset[, predictors])
confusionMatrix(testset$Loan_Status, testset$pred_lr)
testset$pred_rf_prob <- predict(object = model_rf, testset[, pridictors], type = 'prob')
testset$pred_rf_prob <- predict(object = model_rf, testset[, predictors], type = 'prob')
testset$pred_knn_prob <- predict(object = model_knn, testset[, predictors], type = 'prob')
testset$pred_lr_prob <- predict(object = model_lr, testset[, predictors], type = 'prob')
testset$pred_avg <- (testset$pred_rf_prob$Y + testset$pred_knn_prob$Y + testset$pred_lr_prob$Y)/3
testset$pred_avg_status <- as.factor(ifelse(testset$pred_avg>0.5, 'Y', 'N'))
table(testset$Loan_Status, testset$pred_avg_status)
testset$pred_majority <- as.factor(
ifelse(testset$pred_rf == 'Y' & testset$pred_knn == 'Y', 'Y',
ifeles(testset$pred_rf == 'Y' & testset$pred_lr == 'Y', 'Y',
ifeles(testset$pred_knn == 'Y' & testset$pred_lr == 'Y', 'Y', 'N'))))
testset$pred_majority <- as.factor(
ifelse(testset$pred_rf == 'Y' & testset$pred_knn == 'Y', 'Y',
ifeles(testset$pred_rf == 'Y' & testset$pred_lr == 'Y', 'Y',
ifelse(testset$pred_knn == 'Y' & testset$pred_lr == 'Y', 'Y', 'N'))))
testset$pred_majority <- as.factor(
ifelse(testset$pred_rf == 'Y' & testset$pred_knn == 'Y', 'Y',
ifelse(testset$pred_rf == 'Y' & testset$pred_lr == 'Y', 'Y',
ifelse(testset$pred_knn == 'Y' & testset$pred_lr == 'Y', 'Y', 'N'))))
table(testset$Loan_Status, testset$pred_majority)
testset$pred_weighted_avg <- testset$pred_rf_prob$Y*0.25 + testset$pred_knn_prob$Y*0.25 + testset$pred_lr_prob*0.5
testset$pred_weighted_avg_status <- as.factor(ifelse(testset$pred_weighted_avg>0.5, 'Y', 'N'))
testset$pred_weighted_avg <- testset$pred_rf_prob$Y*0.25 + testset$pred_knn_prob$Y*0.25 + testset$pred_lr_prob*0.5
View(testset)
testset$pred_weighted_avg_status <- as.factor(ifelse(testset$pred_weighted_avg>0.5, 'Y', 'N'))
testset$pred_weighted_avg_status <- as.factor(ifelse(testset$pred_weighted_avg$Y>0.5, 'Y', 'N'))
testset$pred_weighted_avg <- testset$pred_rf_prob$Y*0.25 + testset$pred_knn_prob$Y*0.25 + testset$pred_lr_prob*0.5
testset$pred_weighted_avg$N <- null
testset$pred_weighted_avg$N <- NULL
testset$pred_weighted_avg$Y <- NULL
testset$pred_weighted_avg$N <- NULL
View(testset)
rm(testset)
trainset <- data_processed[index,]
testset <- data_processed[-index,]
# defining the controls for multiple models
fitcontrol <- trainControl(
method = 'cv',
number = 5,
savePredictions = 'final',
classProbs = T)
# defining the predictions and outcome
predictors <- c('Credit_History', 'LoanAmount', 'Loan_Amount_Term', 'ApplicantIncome','CoapplicantIncome')
outcomename <- 'Loan_Status'
# training the random forest model
model_rf <- train(trainset[, predictors], trainset[, outcomename], method = 'rf', trControl = fitcontrol, tuneLength = 3)
# predicting using random forest model
testset$pred_rf <- predict(object = model_rf, testset[, predictors])
# checking the accuracy of the random forest model
confusionMatrix(testset$Loan_Status, testset$pred_rf)
# training the knn model
model_knn <- train(trainset[, predictors], trainset[, outcomename], method = 'knn', trControl = fitcontrol, tuneLength = 3)
# predicting using knn model
testset$pred_knn <- predict(object = model_knn, testset[, predictors])
# checking the accuracy of the knn model
confusionMatrix(testset$Loan_Status, testset$pred_knn)
# training the logistic regression model
model_lr <- train(trainset[, predictors], trainset[, outcomename], method = 'glm', trControl = fitcontrol, tuneLength = 3)
# predicting using logistic regression model
testset$pred_lr <- predict(object = model_lr, testset[, predictors])
# checking the accuracy of the logistic regression model
confusionMatrix(testset$Loan_Status, testset$pred_lr)
# averagind
# predicting the probabilities
testset$pred_rf_prob <- predict(object = model_rf, testset[, predictors], type = 'prob')
testset$pred_knn_prob <- predict(object = model_knn, testset[, predictors], type = 'prob')
testset$pred_lr_prob <- predict(object = model_lr, testset[, predictors], type = 'prob')
# taking the average of prediction
testset$pred_avg <- (testset$pred_rf_prob$Y + testset$pred_knn_prob$Y + testset$pred_lr_prob$Y)/3
#splitting into binary classes at 0.5
testset$pred_avg_status <- as.factor(ifelse(testset$pred_avg>0.5, 'Y', 'N'))
table(testset$Loan_Status, testset$pred_avg_status)
# majority voting
testset$pred_majority <- as.factor(
ifelse(testset$pred_rf == 'Y' & testset$pred_knn == 'Y', 'Y',
ifelse(testset$pred_rf == 'Y' & testset$pred_lr == 'Y', 'Y',
ifelse(testset$pred_knn == 'Y' & testset$pred_lr == 'Y', 'Y', 'N'))))
table(testset$Loan_Status, testset$pred_majority)
View(testset)
testset$pred_weighted_avg <- (testset$pred_rf_prob$Y*0.25) + (testset$pred_knn_prob$Y*0.25) + (testset$pred_lr_prob*0.5)
View(testset)
testset$pred_weighted_avg <- (testset$pred_rf_prob$Y*0.25) + (testset$pred_knn_prob$Y*0.25) + (testset$pred_lr_prob$Y*0.5)
testset$pred_weighted_avg <- (testset$pred_rf_prob$Y*0.25) + (testset$pred_knn_prob$Y*0.25) + (testset$pred_lr_prob$Y*0.5)
testset$pred_weighted_avg.N <- NULL
testset$pred_weighted_avg <- NULL
View(testset)
testset$pred_weighted_avg <- (testset$pred_rf_prob$Y*0.25) + (testset$pred_knn_prob$Y*0.25) + (testset$pred_lr_prob$Y*0.5)
testset$pred_weighted_avg_status <- as.factor(ifelse(testset$pred_weighted_avg>0.5, 'Y', 'N'))
table(testset$Loan_Status, testset$pred_weighted_avg_status)
fitcontrol <- trainControl(
method = 'cv',
number = 10,
savePredictions = 'final',
classProbs = T
)
predictors <- c('Credit_History', 'LoanAmount', 'Loan_Amount_Term', 'ApplicantIncome','CoapplicantIncome')
outcomename <- 'Loan_Status'
model_rf <- train(trainset[, predictors], trainset[, outcomename], method = 'rf', trControl = fitcontrol, tuneLength = 3)
model_knn <- train(trainset[, predictors], trainset[, outcomename], method = 'knn', trControl = fitcontrol, tuneLength = 3)
model_lr <- train(trainset[, predictors], trainset[, outcomename], method = 'glm', trControl = fitcontrol, tuneLength = 3))
model_lr <- train(trainset[, predictors], trainset[, outcomename], method = 'glm', trControl = fitcontrol, tuneLength = 3)
model_rf
model_rf$pred
trainset$oof_pred_rf <- model_rf$pred$Y[order(model_rf$pred$rowIndex)]
trainset$oof_pred_knn <- model_knn$pred$Y[order(model_knn$pred$rowIndex)]
trainset$oof_pred_lr <- model_lr$pred$Y[order(model_lr$pred$rowIndex)]
View(trainset)
testset$oof_pred_rf <- predict(model_rf, testset[,predictors],type = 'prob')$Y
testset <- data_processed[-index,]
testset$oof_pred_rf <- predict(model_rf, testset[,predictors],type = 'prob')$Y
testset$oof_pred_knn <- predict(model_knn, testset[, predictors], type = 'prob')$Y
testset$oof_pred_lr <- predict(model_lr, testset[, predictors], type = 'prob')$Y
predictors_top <- c('oof_pred_rf', 'oof_pred_knn', 'oof_pred_lr')
model_gbm <- train(trainset[, predictors_top], trainset[, outcomename], method = 'gbm', trControl = fitcontrol, tuneLength = 3)
model_gbm <- train(trainset[, predictors_top], trainset[, outcomename], method = 'gbm', trControl = fitcontrol, tuneLength = 3)
model_glm <- train(trainset[, predictors_top], trainset[, outcomename], method = 'glm', trControl = fitcontrol, tuneLength = 3)
testset$gbm_stacked <- predict(model_gbm, testset[, predictors_top])
testset$glm_stacked <- predict(model_glm, testset[, predictors_top])
table(testset$Loan_Status, testset$gbm_stacked)
table(testset$Loan_Status, testset$glm_stacked)
str(data)
sum(is.na(data))
data.frame(table(mdrrDescr$nR11))
data(mdrr)
library('caret')
data(mdrr)
data.frame(table(mdrrDescr$nR11))
nzv <- nearZeroVar(mdrrDescr, saveMetrics = T)
nzv[nzv$nzv,][1:10,]
str(nzv)
nzv[1:10,]
table(nzv$nzv)
setwd("F:/百度云同步盘/Data Science/01 R/03 data mining/caret")
library('caret')
set.seed(1)
load('mutagen.RData')
load('descr.RData')
sum(is.na(traindescr))
nzvdescr <- nearZeroVar(descr, saveMetrics = T)
table(nzvdescr$nzv)
nzvdescr[nzvdescr$nzv,][1:10,]
dim(mdrrDescrr)
dim(mdrrDescr)
nzv <- nearZeroVar(mdrrDescr)
filtereddescr <- mdrrDescr[, -nzv]
dim(filtereddescr)
nzvdescr <- nearZeroVar(descr)
filteredmdrr <- mdrrDescr[, -nzv]
dim(filteredmdrr)
filtereddescr <- descr[, -nzvdescr]
intrain <- createDataPartition(mutagen, p = 0.75, list = FALSE)
traindescr <- filtereddescr[intrain,]
testdescr <- filtereddescr[-intrain,]
trainclass <- mutagen[intrain]
testclass <- mutagen[-intrain]
prop.table(table(mutagen))
prop.table(table(trainclass))
prop.table(table(testclass))
ncol(traindescr)
descrcorr <- cor(traindescr[1:20], use = 'pairwise.complete.obs')
sum(is.na(descrcorr))
highcorr <- findCorrelation(descrcorr, 0.90)
str(traindescr)
descrcor <- cor(filteredmdrr)
highcorrc <- sum(abs(descrcor[upper.tri(descrcor)]) > 0.999)
summary(descrcor[upper.tri(descrcor)])
highlycordescr <- findCorrelation(descrcor, cutoff = 0.75)
filtereddescr2 <- filtereddescr[, -highlycordescr]
dim(filtereddescr2)
dim(filteredmdrr)
library('caret')
data(mdrr)
dim(mdrrDescr)
nzv <- nearZeroVar(mdrrDescr)
filteredmdrr <- mdrrDescr[, -nzv]
dim(filteredmdrr)
mdrrcor <- cor(filteredmdrr)
highcor <- sum(abs(mdrrcor[upper.tri(mdrrcor)]) > 0.999)
highcor
summary(mdrrcor[upper.tri(mdrrcor)])
highcor <- findCorrelation(mdrrcor, cutoff = 0.75)
filteredmdrr <- filteredmdrr[, -highcor]
dim(filteredmdrr)
ltfrDesign <- matrix(0, nrow=6, ncol=6)
ltfrDesign[,1] <- c(1, 1, 1, 1, 1, 1)
ltfrDesign[,2] <- c(1, 1, 1, 0, 0, 0)
ltfrDesign[,3] <- c(0, 0, 0, 1, 1, 1)
ltfrDesign[,4] <- c(1, 0, 0, 1, 0, 0)
ltfrDesign[,5] <- c(0, 1, 0, 0, 1, 0)
ltfrDesign[,6] <- c(0, 0, 1, 0, 0, 1)
comboinfo <- findLinearCombos(ltfrDesign)
comboinfo
filteredltfrDesign <- ltfrDesign[, -comboinfo$remove]
filteredltfrDesign
set.seed(96)
intrain <- sample(seq(along = mdrrClass), length(mdrrClass)/2)
training <- filteredmdrr[intrain,]
testing <- filteredmdrr[- intrain,]
trainmdrr <- mdrrClass[intrain,]
testmdrr <- mdrrClass[- intrain,]
trainmdrr <- mdrrClass[intrain]
testmdrr <- mdrrClass[- intrain]
preprocvalues <- preProcess(training, method = c('center', 'scale'))
traintransformed <- predict(preprocvalues, training)
testtransformed <- predict(preprocvalues, testing)
View(traintransformed)
View(training)
library('caret')
library('AppliedPredictiveModeling')
library('mlbench')
library('rstudioapi')
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
transparentTheme(trans = 0.4)
featurePlot(x = iris[, 1:4],
y = iris$Species,
plot = 'pairs',
auto.key = list(columns = 3))
featurePlot(x = iris[, 1:4],
y = iris$Species,
plot = 'ellipse',
auto.key = list(columns = 3))
data("BostonHousing")
regvar <- c('age', 'lstat', 'tax')
str(BostonHousing[, regvar])
featurePlot(x = BostonHousing[, regvar],
y = BostonHousing$medv,
plot = 'scatter',
type = c('p', 'smooth'),
span = 0.5,
layout = c(3, 1))
library('earth')
data("etitanic")
head(model.matrix(survived ~., data = etitanic))
head(etitanic)
etitanic$a <- rowname(etitanic)
etitanic$a <- rownames(etitanic)
head(etitanic)
etitanic$a <- null
etitanic$a <- NULL
head(etitanic)
