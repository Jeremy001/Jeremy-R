### 用阿拉伯数字代替罗马数字,转换日期格式
sb$NO. <- c(1:dim(sb))
sb$NO. <- c(1:dim(sb)[1])
head(sb)
?as.Date
sb$DATE <- as.Date(sb$DATE)
sb$DATE <- parse_date_time(sb$DATE, orders = c('Ymd', 'mdy', 'dmY', 'ymd'))
head(sb)
?parse_date_time
sb$DATE <- parse_date_time(sb$DATE, orders = c('%B. %d, %Y'))
sb$DATE <- parse_date_time(sb$DATE, orders = c('%B %d %Y'))
sb <- html_table(sb_table[[1]])
head(sb)
## 4.把数据整理一下
### 去掉前两行(无效数据),加上原来的列名
rown <- sb[2,]
sb <- sb[-(1:2), ]
colnames(sb) = rown
head(sb)
### 用阿拉伯数字代替罗马数字,转换日期格式
sb$NO. <- c(1:dim(sb)[1])
head(sb)
dates <- c("May 27 1984", "July 7 2005")
betterDates <- as.Date(dates,
format = "%B %d %Y")
betterDates
dates <- c("May 27 1984", "July 7 2005")
betterDates <- as.Date(dates,
format = "%B %d %Y")
betterDates
dates <- c("May. 27, 1984", "July. 7, 2005")
betterDates <- as.Date(dates,
format = "%B. %d, %Y")
betterDates
sb$DATE <- parse_date_time(sb$DATE, orders = c('Ymd', 'mdy', 'dmY', 'ymd',
'%B %d %Y', "%B. %d, %Y"))
head(sb)
dates <- c("Jan. 15, 1967", "July. 7, 2005")
betterDates <- as.Date(dates,
format = "%B. %d, %Y")
betterDates
dates <- c("Jan. 15, 1969", "July. 7, 2005")
betterDates <- as.Date(dates,
format = "%B. %d, %Y")
betterDates
head(sb)
sb[!is.na(sb$DATE),]
sb_table <- html_nodes(webpage, 'table')
## 3.把内容转换成dataframe
sb <- html_table(sb_table[[1]])
head(sb)
## 4.把数据整理一下
### 去掉前两行(无效数据),加上原来的列名
rown <- sb[2,]
sb <- sb[-(1:2), ]
colnames(sb) = rown
head(sb)
### 用阿拉伯数字代替罗马数字,转换日期格式
sb$NO. <- c(1:dim(sb)[1])
sb$DATE <- as.Date(sb$DATE, format = "%b. %d, %Y")
head(sb)
table(sb$DATE)
sb <- html_table(sb_table[[1]])
head(sb)
## 4.把数据整理一下
### 去掉前两行(无效数据),加上原来的列名
rown <- sb[2,]
sb <- sb[-(1:2), ]
colnames(sb) = rown
head(sb)
### 用阿拉伯数字代替罗马数字,转换日期格式
sb$NO. <- c(1:dim(sb)[1])
head(sb)
sb$DATE
as.Date("Feb. 1, 2015", format = "%b. %d, %Y")
as.Date("Feb. 1, 2015", format = "%B. %d, %Y")
as.Date("Feb. 1, 2015", format = "%B%d%Y")
str(sb)
help("as.Date")
as.Date("Jan. 12, 1969", format = "%B. %d, %Y")
as.Date("Jan. 12, 1969", format = "%b. %d, %Y")
sb$DATE <- as.Date(sb$DATE, format = "%B. %d, %Y")
head(sb)
sb <- html_table(sb_table[[1]])
head(sb)
## 4.把数据整理一下
### 去掉前两行(无效数据),加上原来的列名
rown <- sb[2,]
sb <- sb[-(1:2), ]
colnames(sb) = rown
head(sb)
### 用阿拉伯数字代替罗马数字,转换日期格式
sb$NO. <- c(1:dim(sb)[1])
head(sb)
?separate
sb <- separate(sb, RESULT, c('winner', 'loser', sep = ', ', remove = TRUE))
head(sb)
sb <- html_table(sb_table[[1]])
head(sb)
## 4.把数据整理一下
### 去掉前两行(无效数据),加上原来的列名
rown <- sb[2,]
sb <- sb[-(1:2), ]
colnames(sb) = rown
head(sb)
### 用阿拉伯数字代替罗马数字,转换日期格式
sb$NO. <- c(1:dim(sb)[1])
sb <- separate(sb, RESULT, c('winner', 'loser'), sep = ', ', remove = TRUE)
head(sb)
pattern <- "\\d+$"
pattern
sb$winnerScore <- as.numeric(str_extract(sb$winner, pattern))
head(sb)
library('jsonlite')
jsondata <- fromJSON("https://api.github.com/users/jtleek/repos")
names(jsondata)
names(jsondata$owner)
jsondata$owner$login
myjson <- toJSON(iris, pretty = TRUE)
cat(myjson)
iris2 <- fromJSON(myjson)
head(iris2)
vignette(jsonlite)
vignette('jsonlite')
jsonlite::vignette
library('data.table')
?runif
df <- data.frame(a = rnorm(10),
b = runif(10, 1, 10),
c = letters(10))
df <- data.frame(a = rnorm(10),
b = runif(10, 1, 10),
c = letters[10])
df
df <- data.frame(a = rnorm(6),
b = runif(6, 1, 10),
c = letters[1:6])
df
dt <- data.table(a = rnorm(6),
b = runif(6, 1, 10),
c = letters[1:6])
dt
set.seed(123)
df <- data.frame(a = rnorm(6),
b = runif(6, 1, 10),
c = letters[1:6])
df
dt <- data.table(a = rnorm(6),
b = runif(6, 1, 10),
c = letters[1:6])
dt
tables()
class(df)
class(dt)
dt[2,]
dt[dt$a < 0,]
dt[, 1]
dt[, 2:3]
dt[, c(2, 3)]
dt[, w:= a^2 * 10]
dt
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == 'swirl')
filter(cran, r_version == '3.1.1', country == 'US')
?Comparison
filter(cran, r_version <= '3.0.2', country == 'IN')
filter(cran, country == "US" | country == 'IN')
filter(cran, size > 100500, r_os == 'linux-gnu')
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(R.version))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_size = mean(size))
summarize(cran, avg_bytes = mean(size))
swirl()
install_from_swirl("Data_Analysis")
swirl()
swirl()
install_from_swirl("Exploratory_Data_Analysis")
shiny::runApp('E:/0wlw/BI/shiny-bi/floatingfern')
swirl()
library(swirl)
swirl()
library(dplyr)
cran <- tal_df(mydf)
cran <- tbl_df(mydf)
rm(mydf)
rm("mydf")
cran
cran
group_by(cran,package)
?group_by()
help("group_by")
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
cran %>% select(ip_id, country, package, size) %>% print
submit()
submit()
submit()
submit()
submit()
shiny::runApp('E:/0wlw/BI/shiny-bi/floatingfern')
shiny::runApp('E:/0wlw/BI/shiny-bi/floatingfern')
shiny::runApp('E:/0wlw/BI/shiny-bi/floatingfern')
shiny::runApp('E:/0wlw/BI/shiny-bi/floatingfern')
shiny::runApp('E:/0wlw/BI/shiny-bi/floatingfern')
shiny::runApp('E:/0wlw/BI/shiny-bi/floatingfern')
install_pkg <- function(pkg){
# 从列出的包中筛选出还未安装的包
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
# 如果有未安装的包，则安装该包和其依赖包
if(length(new.pkg)) install.packages(new.pkg, dependencies = TRUE)
# 加载列出的所有包
sapply(pkg, library, character.only = TRUE)
}
pkg <- c("ggplot2", "RJDBC", "recharts", "dplyr", "shiny", "shinydashboard", "DT",
"leaflet", "sqldf", "tidyr", "highcharter", "reshape2", "xts", "lubridate",
"jsonlite", "networkD3")
install_pkg(pkg)
drv <-JDBC("oracle.jdbc.driver.OracleDriver","E:/R/ojdbc6.jar",identifier.quote="`")
conn_b2btest_151 <-dbConnect(drv,"jdbc:oracle:thin:@117.121.48.147:1521/bjdb01","b2btest","inet21")
runApp('E:/0wlw/BI/shiny-bi/floatingfern')
drv <-JDBC("oracle.jdbc.driver.OracleDriver","E:/R/ojdbc6.jar",identifier.quote="`")
conn_b2btest_151 <-dbConnect(drv,"jdbc:oracle:thin:@117.121.48.147:1521/bjdb01","b2btest","inet21")
cust_info <- dbGetQuery(
conn_b2btest_151,
"SELECT vc.vendor_code,
vc.cust_code,
vc.cust_name,
ac.name AS TYPE,
vc.crm_address1,
vc.latitude,
vc.longitutde AS longitude,
vc.crm_pic,
vc.crm_mobile,
sc.name
FROM JQQYNEW.vendor_cust@PRODDB vc
LEFT JOIN JQQYNEW.scuser@PRODDB sc ON vc.sp_user_name = sc.user_name
LEFT JOIN JQQYNEW.acc_cat21@PRODDB ac ON vc.cust_type = ac.code
WHERE vendor_code = 'FYLYSM'"
)
head(cust_info)
leaflet(data = cust_info[, c(3:7)]) %>% addTiles() %>%
addMarkers(popup = ~CUST_NAME,
clusterOptions = markerClusterOptions())
?dateInput
ywy_cust_address <- dbGetQuery(
conn_b2btest_151,
"SELECT om.mas_date,
om.cust_code,
sc1.name,
sc1.longitude,
sc2.latitude,
sc2.user_name,
sc2.name,
COUNT(DISTINCT mas_no) AS order_num,
SUM(amount) AS amount
FROM JQQYNEW.order_mas@PRODDB om
LEFT JOIN JQQYNEW.scuser@PRODDB sc1 ON om.cust_code = sc1.user_name
LEFT JOIN JQQYNEW.scuser@PRODDB sc2 ON om.sp_user_no = sc2.user_no
WHERE vendor_code = 'FYLYSM'
AND mas_code = 'SALES'
AND status_flg <> 'CLOSE'
GROUP BY om.mas_date,
om.cust_code,
sc1.name,
sc1.longitude,
sc2.latitude,
sc2.user_name,
sc2.name"
)
## 创建JDBC连接
drv <-JDBC("oracle.jdbc.driver.OracleDriver","E:/R/ojdbc6.jar",identifier.quote="`")
conn_b2btest_151 <-dbConnect(drv,"jdbc:oracle:thin:@117.121.48.147:1521/bjdb01","b2btest","inet21")
ywy_cust_address <- dbGetQuery(
conn_b2btest_151,
"SELECT om.mas_date,
om.cust_code,
sc1.name,
sc1.longitude,
sc2.latitude,
sc2.user_name,
sc2.name,
COUNT(DISTINCT mas_no) AS order_num,
SUM(amount) AS amount
FROM JQQYNEW.order_mas@PRODDB om
LEFT JOIN JQQYNEW.scuser@PRODDB sc1 ON om.cust_code = sc1.user_name
LEFT JOIN JQQYNEW.scuser@PRODDB sc2 ON om.sp_user_no = sc2.user_no
WHERE vendor_code = 'FYLYSM'
AND mas_code = 'SALES'
AND status_flg <> 'CLOSE'
GROUP BY om.mas_date,
om.cust_code,
sc1.name,
sc1.longitude,
sc2.latitude,
sc2.user_name,
sc2.name"
)
head(ywy_cust_address)
str(ywy_cust_address)
sum(is.na(ywy_cust_address$LATITUDE))
drv <-JDBC("oracle.jdbc.driver.OracleDriver","E:/R/ojdbc6.jar",identifier.quote="`")
conn_b2btest_151 <-dbConnect(drv,"jdbc:oracle:thin:@117.121.48.147:1521/bjdb01","b2btest","inet21")
ywy_cust_address <- dbGetQuery(
conn_b2btest_151,
"SELECT om.mas_date,
om.cust_code,
sc1.name,
sc1.longitude,
sc1.latitude,
sc2.user_name,
sc2.name,
COUNT(DISTINCT mas_no) AS order_num,
SUM(amount) AS amount
FROM JQQYNEW.order_mas@PRODDB om
LEFT JOIN JQQYNEW.scuser@PRODDB sc1 ON om.cust_code = sc1.user_name
LEFT JOIN JQQYNEW.scuser@PRODDB sc2 ON om.sp_user_no = sc2.user_no
WHERE vendor_code = 'FYLYSM'
AND mas_code = 'SALES'
AND status_flg <> 'CLOSE'
GROUP BY om.mas_date,
om.cust_code,
sc1.name,
sc1.longitude,
sc1.latitude,
sc2.user_name,
sc2.name"
)
head(ywy_cust_address)
table(ywy_cust_address)
ywy_cust_address <- dbGetQuery(
conn_b2btest_151,
"SELECT om.mas_date,
om.cust_code,
sc1.name AS cust_name,
sc1.longitude,
sc1.latitude,
sc2.user_name AS ywy_code,
sc2.name AS ywy_name,
COUNT(DISTINCT mas_no) AS order_num,
SUM(amount) AS amount
FROM JQQYNEW.order_mas@PRODDB om
LEFT JOIN JQQYNEW.scuser@PRODDB sc1 ON om.cust_code = sc1.user_name
LEFT JOIN JQQYNEW.scuser@PRODDB sc2 ON om.sp_user_no = sc2.user_no
WHERE vendor_code = 'FYLYSM'
AND mas_code = 'SALES'
AND status_flg <> 'CLOSE'
GROUP BY om.mas_date,
om.cust_code,
sc1.name,
sc1.longitude,
sc1.latitude,
sc2.user_name,
sc2.name"
)
table(ywy_cust_address$YWY_NAME)
?dateRangeInput
runApp('E:/0wlw/BI/shiny-bi/floatingfern')
?selectInput
?fluidRow
runApp('E:/0wlw/BI/shiny-bi/floatingfern')
head(ywy_cust_address)
ywy_cust_address <- tbl_df(ywy_cust_address)
ywy_cust_address
as.Date()
?as.Date()
ywy_cust_address$MAS_DATE <- as.Date(ywy_cust_address$MAS_DATE)
ywy_cust_address
sum(is,na(ywy_cust_address$LONGITUDE))
sum(is.na(ywy_cust_address$LONGITUDE))
sum(is.na(ywy_cust_address$LATITUDE))
ywy_cust_address <- na.omit(ywy_cust_address)
sum(is.na(ywy_cust_address$LONGITUDE))
sum(is.na(ywy_cust_address$LATITUDE))
ywy_cust_address
str(ywy_cust_address)
runApp('E:/R/shiny-examples/041-dynamic-ui')
runApp('E:/R/shiny-examples/037-date-and-date-range')
runApp('E:/R/shiny-examples/096-plot-interaction-article-1')
runApp('E:/R/shiny-examples/097-plot-interaction-article-2')
runApp('E:/R/shiny-examples/104-plot-interaction-select')
runApp('E:/R/shiny-examples/036-custom-input-control')
runApp('E:/R/shiny-examples/003-reactivity')
?filter()
head(ywy_cust_address)
str(ywy_cust_address)
runApp('E:/0wlw/BI/shiny-bi/floatingfern')
runApp('E:/0wlw/BI/shiny-bi/floatingfern')
runApp('E:/R/test')
runApp('E:/R/test')
ywy_cust_data <-
ywy_cust_address %>%
filter(MAS_DATE >= as.Date('2017-04-19',
format = 'yyyy-mm-dd') &
MAS_DATE <= as.Date('2017-04-20',
format = 'yyyy-mm-dd') &
YWY_NAME = '方承普')
ywy_cust_address %>%
filter(MAS_DATE >= as.Date('2017-04-19',
format = 'yyyy-mm-dd')
)
filter(ywy_cust_address, MAS_DATE == as.Date('2017-04-19', format = 'yyyy-mm-dd'))
filter(ywy_cust_address, MAS_DATE == '2017-04-19')
ywy_cust_data <-
ywy_cust_address %>%
filter(MAS_DATE >= '2017-04-19' &
MAS_DATE <= '2017-04-20' &
YWY_NAME = '方承普')
runApp('E:/R/test')
head(ywy_cust_address)
runApp('E:/R/test')
runApp('E:/R/test')
runApp('E:/0wlw/BI/shiny-bi/floatingfern')
library('rstudioapi')
library('dplyr')
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
fileurl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD"
download.file(fileurl, destfile = './cameras.csv', method = 'curl')
list.files()
library(RMySQL)
library(swirl)
swirl()
library(tidyr)
students
?gathre
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c('sex', 'class'), sep = '-')
separate(res, sex_class, c('sex', 'class'), sep = '_')
separate(res, sex_class, c('sex', 'class'))
submit()
students3
submit()
reset()
submit()
swirl()
submit()
?spread()
?spread
submit()
library(readr)
parse_number("class5")
submit()
students4
submit()
submit()
submit()
passed
failed
passed <- mutate(passed, status = 'passed')
failed <- mutate(failed, status = 'failed')
package_version('dplyr')
packageVersion('dplyr')
bind_rows(passed, failed)
sat
submit()
submit()
bye()
