jsondata <- fromJSON("https://api.github.com/users/jtleek/repos")
names(jsondata)
names(jsondata$owner)
jsondata$owner$login
myjson <- toJSON(iris, pretty = TRUE)
cat(myjson)
iris2 <- fromJSON(myjson)
head(iris2)
vignette(jsonlite)
vignette('jsonlite')
jsonlite::vignette
library('data.table')
?runif
df <- data.frame(a = rnorm(10),
b = runif(10, 1, 10),
c = letters(10))
df <- data.frame(a = rnorm(10),
b = runif(10, 1, 10),
c = letters[10])
df
df <- data.frame(a = rnorm(6),
b = runif(6, 1, 10),
c = letters[1:6])
df
dt <- data.table(a = rnorm(6),
b = runif(6, 1, 10),
c = letters[1:6])
dt
set.seed(123)
df <- data.frame(a = rnorm(6),
b = runif(6, 1, 10),
c = letters[1:6])
df
dt <- data.table(a = rnorm(6),
b = runif(6, 1, 10),
c = letters[1:6])
dt
tables()
class(df)
class(dt)
dt[2,]
dt[dt$a < 0,]
dt[, 1]
dt[, 2:3]
dt[, c(2, 3)]
dt[, w:= a^2 * 10]
dt
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == 'swirl')
filter(cran, r_version == '3.1.1', country == 'US')
?Comparison
filter(cran, r_version <= '3.0.2', country == 'IN')
filter(cran, country == "US" | country == 'IN')
filter(cran, size > 100500, r_os == 'linux-gnu')
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(R.version))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_size = mean(size))
summarize(cran, avg_bytes = mean(size))
swirl()
install_from_swirl("Data_Analysis")
swirl()
swirl()
install_from_swirl("Exploratory_Data_Analysis")
shiny::runApp('E:/0wlw/BI/shiny-bi/floatingfern')
swirl()
library(swirl)
swirl()
library(dplyr)
cran <- tal_df(mydf)
cran <- tbl_df(mydf)
rm(mydf)
rm("mydf")
cran
cran
group_by(cran,package)
?group_by()
help("group_by")
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
cran %>% select(ip_id, country, package, size) %>% print
submit()
submit()
submit()
submit()
submit()
shiny::runApp('E:/0wlw/BI/shiny-bi/floatingfern')
shiny::runApp('E:/0wlw/BI/shiny-bi/floatingfern')
shiny::runApp('E:/0wlw/BI/shiny-bi/floatingfern')
shiny::runApp('E:/0wlw/BI/shiny-bi/floatingfern')
shiny::runApp('E:/0wlw/BI/shiny-bi/floatingfern')
remove.packages('jiebaR')
library(jiebaR)
library(jiebaR)
library(jiebaR)
wk = worker()
shiny::runApp('E:/0wlw/BI/shiny-bi/floatingfern')
install_pkg <- function(pkg){
# 从列出的包中筛选出还未安装的包
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
# 如果有未安装的包，则安装该包和其依赖包
if(length(new.pkg)) install.packages(new.pkg, dependencies = TRUE)
# 加载列出的所有包
sapply(pkg, library, character.only = TRUE)
}
pkg <- c("ggplot2", "RJDBC", "recharts", "dplyr", "shiny", "shinydashboard", "DT",
"leaflet", "sqldf", "tidyr", "highcharter", "reshape2", "xts", "lubridate",
"jsonlite", "networkD3")
install_pkg(pkg)
## 创建JDBC连接
drv <-JDBC("oracle.jdbc.driver.OracleDriver",
"E:/R/ojdbc6.jar",
identifier.quote="`")
conn_b2btest_151 <-dbConnect(drv,
"jdbc:oracle:thin:@117.121.48.147:1521/bjdb01",
"b2btest",
"inet21")
cust_num <- dbGetQuery(
conn_b2btest_151,
"SELECT vc.sp_user_name,
sc.name,
COUNT(vc.cust_code) AS cust_num,
COUNT(CASE WHEN vc.create_date >= TO_DATE('2017-03-01', 'yyyy-mm-dd')
THEN vc.cust_code ELSE NULL END) AS cust_new
FROM JQQYNEW.vendor_cust@PRODDB vc
LEFT JOIN JQQYNEW.scuser@PRODDB sc ON vc.sp_user_name = sc.user_name
WHERE vendor_code = 'FYLYSM'
GROUP BY sp_user_name,
sc.name"
)
runApp('E:/0wlw/BI/shiny-bi/floatingfern')
data("mtcars")
head(mtcars)
library('dplyr')
data("iris")
head(iris)
head(iris)
str(iris)
iris2 <- tbl_df(iris)
iris2
iris2 <- tbl_df(iris)
iris2
str(iris2)
iris_s <- select(iris2, Species, Sepal.Length, Sepal.Width)
iris_s
iris_s <- select(iris2, Species, variable %in% c('Sepal.Width'))
library('dplyr')
library('dplyr')
iris2 <- tbl_df(iris)
iris2
str(iris2)
iris_s <- select(iris2, Species, variable %in% c('Sepal.Width'))
library(dplyr)
s2 <- select(iris, Species, contains('Sepal'))
head(s2)
library(dplyr)
library(dplyr)
data(iris)
head(iris)
library(dplyr)
data(iris)
head(iris)
iris2 <- select(iris, Sepal.Length, Sepal.Width, Species)
head(iris2)
iris3 <- select(iris, 1:2, 5)
head(iris3)
iris4 <- select(iris, contains('Sepal'))
head(iris4)
knitr::opts_chunk$set(echo = TRUE, include = TRUE)
str(airquality)
?select()
library(dplyr)
data(iris)
head(iris)
iris2 <- select(iris, Species)
head(iris2)
iris3 <- select(iris, 1:4)
head(iris3)
iris4 <- select(iris, Sepal.Length, Sepal.Width, Species)
head(iris4)
iris5 <- select(iris, contains('Sepal'))
head(iris5)
irir3 <- select(iris, -5)
head(iris3)
?select()
library(jiebaR)
wk = worker()
fruit <- 'apple orange grape banana'
nchar(fruit)
length(fruit)
x <- strsplit(fruit, split = ' ')
x
str(x)
fruitvec <- unlist(strsplit(fruit, split = ' '))
fruitvec
x <- paste(fruitvec, collapse = ',')
x
str(x)
x = paste0(fruitvec)
x
str(x)
x = paste0(fruitvec, collapse = ':')
x
str(x)
x = paste0(fruitvec, collapse = ';')
x
x <- substr(fruit, 1, 5)
x
fruit <- 'apple orange grape banana'
fruit
library(stringr)
strurl <- 'http://movie.douban.com/top250'
web <- readLines(strurl, encoding = 'UTF-8')
web[[1]]
str(web)
head(web)
Sys.getlocale('LC_ALL', 'Chinese')
shiny::runApp('E:/0wlw/BI/shiny-bi/floatingfern')
shiny::runApp('E:/0wlw/BI/shiny-bi/floatingfern')
install.packages("pbapply")
install.packages("pbapply")
install.packages(c("nycflights13", "gapminder", "Lahman"))
install.packages("plyr")
source('E:/R/Jeremy-R/03 data mining/NLP/jiebaR.r')
source('E:\R\Jeremy-R\03 data mining\NLP\jiebaR.r')
source('E:\\R\\Jeremy-R\\03 data mining\\NLP\\jiebaR.r')
install.packages('tidyverse')
library(tidyverse)
library(tidyverse)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
?mpg
ggplot(data = mpg) +
geom_point(mapping = aes(x = cyl, y = hwy))
ggplot(data = mpg) +
geom_point(mapping = aes(x = drv, y = hwy))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, size = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, alpha = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, shape = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), color = 'blue')
str(mpg)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), color = cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = cyl))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = fl))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = cyl, shape = cyl))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = fl, shape = fl))
?geom_point
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, stroke = dl))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, stroke = fl))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, stroke = cyl))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, stroke = cyl, color = cyl))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, stroke = cyl))
?geom_point
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = displ < 5))
mean(hwy)
mean(mpg$hwy)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = hwy > mean(mpg$hwy)))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ,
y = hwy,
color = hwy > mean(mpg$hwy) and displ < 5))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ,
y = hwy,
color = hwy > mean(mpg$hwy) and displ < 5))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ,
y = hwy,
color = hwy > mean(mpg$hwy) & displ < 5))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ,
y = hwy,
color = (hwy > mean(mpg$hwy) & displ < 5)))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ,
y = hwy,
color = hwy > mean(mpg$hwy)))
library('rstudioapi')
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(tidyverse)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(facets = class)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 2)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv ~ cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(. ~ drv)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(. ~ class)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(. ~ class, nrow = 2)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x = drv, y = cyl)) +
facet_grid(drv ~ cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv ~ .)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(class ~ .)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(. ~ class)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = drv)) +
geom_smooth(mapping = aes(x = displ, y = hwy, color = drv))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = drv)) +
geom_smooth(mapping = aes(x = displ, y = hwy, color = drv, linetype = drv))
ggplot(data = mpg) +
geomo_smooth(mapping = aes(x = displ, y = hwy, group = drv))
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy, group = drv))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, group = drv))
ggplot(data = mpg) +
geom_boxplot(mapping = aes(x = displ, y = hwy, group = drv))
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy, color = drv)
show.legend = FALSE)
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy, color = drv),
show.legend = FALSE)
ggplot(data = mpg,
mapping = aes(x = displ, y = hwy)) +
geom_point() +　
geom_smooth()
ggplot(data = mpg,
mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = drv)) +
geom_smooth()
ggplot(data = mpg,
mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth(data = filter(mpg, class == 'subcompact'), se = FALSE)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) +
geom_point() +
geom_smooth(se = FALSE)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth()
ggplot() +
geom_point(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_smooth(data = mpg, mapping = aes(x = displ, y = hwy))
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth(se = FALSE)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth(se = FALSE,
mapping = aes(group = drv))
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) +
geom_point() +
geom_smooth(se = FALSE)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = drv)) +
geom_smooth(se = FALSE)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = drv)) +
geom_smooth(se = FALSE,
mapping = aes(linetype = drv))
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = drv))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut))
ggplot(data = diamonds) +
stat_count(mapping = aes(x = cut))
demo <- tribble(
~cut,         ~freq,
"Fair",       1610,
"Good",       4906,
"Very Good",  12082,
"Premium",    13791,
"Ideal",      21551
)
demo
ggplot(data = demo) +
geom_bar()
ggplot(data = demo) +
geom_bar(mapping = aes(x = cut))
ggplot(data = demo) +
geom_bar(mapping = aes(x = cut, y = freq),
stat = 'identity')
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = ..prop..))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = ..prop.., group = 1))
ggplot(data = diamonds) +
stat_summary(
mapping = aes(x = cut, y = depth),
fun.ymin = min,
fun.ymax = max,
fun.y = median
)
?stat_summary
ggplot(data = diamonds) +
geom_linerange(mapping = aes(x = cut, y = depth))
ggplot(data = diamonds) +
geom_linerange(mapping = aes(x = cut, y = depth),
ymin = min,
ymax = max)
ggplot(data = diamonds) +
geom_col(mapping = aes(x = cut))
ggplot(data = demo) +
geom_col(mapping = aes(x = cut, y = freq))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = ..prop..))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = ..prop.., group = 0.5))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = ..prop.., group = 3))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = ..prop.., group = 1))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = color, y = ..prop..))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = color, y = ..prop.., group = 1))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = color, y = ..prop.., group = 1))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = color, y = ..prop.., group = cut))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = color, y = ..prop..))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = color, y = ..prop.., group = 100))
